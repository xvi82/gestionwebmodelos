function keyCodes() {
    this.tab = 9, this.enter = 13, this.esc = 27, this.space = 32, this.pageup = 33, this.pagedown = 34, this.end = 35, this.home = 36, this.left = 37, this.up = 38, this.right = 39, this.down = 40
}

function tabpanel(id, accordian) {
    this.panel_id = id, this.accordian = accordian, this.$panel = $("#" + id), this.keys = new keyCodes, this.$tabs = this.$panel.find(".pestania"), this.$panels = this.$panel.find(".panel"), this.bindHandlers(), this.init()
}
tabpanel.prototype.init = function() {
    var $tab;
    this.$panel.attr("aria-multiselectable", this.accordian), this.$panels.attr("aria-hidden", "true"), this.$panels.hide(), $tab = this.$tabs.filter(".activo"), void 0 == $tab && ($tab = this.$tabs.first(), $tab.addClass("activo")), this.$panel.find("#" + $tab.attr("aria-controls"))
        .show()
        .attr("aria-hidden", "false");
}, tabpanel.prototype.switchTabs = function($curTab, $newTab) {
    $curTab.removeClass("activo"), $curTab.removeClass("focus"), $curTab.attr("tabindex", "-1"), $newTab.addClass("activo"), 0 == this.accordian && (this.$panel.find("#" + $curTab.attr("aria-controls"))
        .toggle.attr("aria-hidden", "false")), this.$focusable.length = 0, this.$panels.find(":focusable"), $newTab.attr("tabindex", "0"), $newTab.focus().attr("aria-hidden", "true"), this.$panel.find("#" + $newTab.attr("aria-controls"))
}, tabpanel.prototype.togglePanel = function($tab) {
    $panel = this.$panel.find("#" + $tab.attr("aria-controls")), "true" == $panel.attr("aria-hidden") ? ($panel.slideDown(1e3), $panel.attr("aria-hidden", "false")) : ($panel.slideUp(1e3), $panel.attr("aria-hidden", "true"))
}, tabpanel.prototype.bindHandlers = function() {
    var thisObj = this;
    this.$tabs.keydown(function(e) {
        return thisObj.handleTabKeyDown($(this), e)
    }), this.$tabs.keypress(function(e) {
        return thisObj.handleTabKeyPress($(this), e)
    }), this.$tabs.click(function(e) {
        return thisObj.handleTabClick($(this), e)
    }), this.$tabs.focus(function(e) {
        return thisObj.handleTabFocus($(this), e)
    }), this.$tabs.blur(function(e) {
        return thisObj.handleTabBlur($(this), e)
    }), this.$panels.keydown(function(e) {
        return thisObj.handlePanelKeyDown($(this), e)
    }), this.$panels.keypress(function(e) {
        return thisObj.handlePanelKeyPress($(this), e)
    })
}, tabpanel.prototype.handleTabKeyDown = function($tab, e) {
    if (e.altKey) return !0;
    switch (e.keyCode) {
        case this.keys.enter:
        case this.keys.space:
            return 1 == this.accordian ? (this.togglePanel($tab), e.stopPropagation(), !1) : !0;
        case this.keys.left:
        case this.keys.up:
            var $newTab;
            if (e.ctrlKey);
            else {
                var curNdx = this.$tabs.index($tab);
                $newTab = 0 == curNdx ? this.$tabs.last() : this.$tabs.eq(curNdx - 1), this.switchTabs($tab, $newTab)
            }
            return e.stopPropagation(), !1;
        case this.keys.right:
        case this.keys.down:
            var $newTab, curNdx = this.$tabs.index($tab);
            return $newTab = curNdx == this.$tabs.last()
                .index() ? this.$tabs.first() : this.$tabs.eq(curNdx + 1), this.switchTabs($tab, $newTab), e.stopPropagation(), !1;
        case this.keys.home:
            return this.switchTabs($tab, this.$tabs.first()), e.stopPropagation(), !1;
        case this.keys.end:
            return this.switchTabs($tab, this.$tabs.last()), e.stopPropagation(), !1
    }
}, tabpanel.prototype.handleTabKeyPress = function($tab, e) {
    if (e.altKey) return !0;
    switch (e.keyCode) {
        case this.keys.enter:
        case this.keys.space:
        case this.keys.left:
        case this.keys.up:
        case this.keys.right:
        case this.keys.down:
        case this.keys.home:
        case this.keys.end:
            return e.stopPropagation(), !1;
        case this.keys.pageup:
        case this.keys.pagedown:
            return e.ctrlKey ? (e.stopPropagation(), !1) : !0
    }
    return !0
}, tabpanel.prototype.handleTabClick = function($tab) {
        if ($tab.hasClass('activo') && ($tab.attr('id')).indexOf('tab') != -1 )
        {
            return this.$tabs.removeClass("activo"), this.$tabs.attr("tabindex", "-1"), this.$panels.slideUp("fast"), !0
        }
        else
            return this.$tabs.removeClass("activo"), this.$tabs.attr("tabindex", "-1"), this.$panels.slideUp("fast"), $tab.addClass("activo"), this.$panel.find("#" + $tab.attr("aria-controls"))
        .slideDown("fast", function() {
            $("#divAcordeon")
                .length > 0 && $("html, body")
                .animate({
                    scrollTop: $tab.offset()
                        .top,
                }, 0)
        }), $tab.attr("tabindex", "0"), $tab.focus(), !0
}, tabpanel.prototype.handleTabFocus = function($tab) {
    return $tab.addClass("focus"), !0
}, tabpanel.prototype.handleTabBlur = function($tab) {
    return $tab.removeClass("focus"), !0
}, tabpanel.prototype.handlePanelKeyDown = function($panel, e) {
    if (e.altKey) return !0;
    switch (e.keyCode) {
        case this.keys.tab:
            var $focusable = $panel.find(":focusable")
                , curNdx = $focusable.index($(e.target))
                , panelNdx = this.$panels.index($panel)
                , numPanels = this.$panels.length;
            if (e.shiftKey) {
                if (0 == curNdx && panelNdx > 0)
                    for (var ndx = panelNdx - 1; ndx >= 0; ndx--) {
                        var $prevPanel = this.$panels.eq(ndx);
                        if ($focusable.length = 0, $focusable = $prevPanel.find(":focusable"), $focusable.length > 0) return $focusable.last()
                            .focus(), e.stopPropagation, !1
                    }
            } else if (numPanels > panelNdx && curNdx == $focusable.length - 1)
                for (var ndx = panelNdx + 1; numPanels > ndx; ndx++) {
                    var $nextPanel = this.$panels.eq(ndx);
                    if ($focusable.length = 0, $focusable = $nextPanel.find(":focusable"), $focusable.length > 0) return $focusable.first()
                        .focus(), e.stopPropagation, !1
                }
            break;
        case this.keys.left:
        case this.keys.up:
            if (!e.ctrlKey) return !0;
            var $tab = $("#" + $panel.attr("aria-labeledby"));
            return $tab.focus(), e.stopPropagation(), !1;
        case this.keys.pageup:
            var $newTab;
            if (!e.ctrlKey) return !0;
            var $tab = this.$tabs.filter(".activo")
                , curNdx = this.$tabs.index($tab);
            return $newTab = 0 == curNdx ? this.$tabs.last() : this.$tabs.eq(curNdx - 1), this.switchTabs($tab, $newTab), e.stopPropagation(), e.preventDefault(), !1;
        case this.keys.pagedown:
            var $newTab;
            if (!e.ctrlKey) return !0;
            var $tab = $("#" + $panel.attr("aria-labeledby"))
                , curNdx = this.$tabs.index($tab);
            return $newTab = curNdx == this.$tabs.last()
                .index() ? this.$tabs.first() : this.$tabs.eq(curNdx + 1), this.switchTabs($tab, $newTab), e.stopPropagation(), e.preventDefault(), !1
    }
    return !0
}, tabpanel.prototype.handlePanelKeyPress = function($elem, e) {
    if (e.altKey) return !0;
    if (e.ctrlKey && (e.keyCode == this.keys.pageup || e.keyCode == this.keys.pagedown)) return e.stopPropagation(), e.preventDefault(), !1;
    switch (e.keyCode) {
        case this.keys.esc:
            return e.stopPropagation(), e.preventDefault(), !1
    }
    return !0
}, $.extend($.expr[":"], {
    focusable: function(element) {
        var nodeName = element.nodeName.toLowerCase()
            , tabIndex = $(element)
                .attr("tabindex");
        return 1 == $(element)["area" == nodeName ? "parents" : "closest"](":hidden")
            .length ? !1 : !isNaN(tabIndex) && 0 > tabIndex ? !1 : 1 == /input|select|textarea|button|object/.test(nodeName) ? !element.disabled : 1 == ("a" == nodeName || "area" == nodeName) ? element.href.length > 0 : !1
    }
});
